name: Treble Creator

on:
  workflow_dispatch:
    inputs:
      device:
        description: "Device Model Number"
        required: True
        type: choice
        options:
          - SM-A505FDD
      region:
        description: "Device Region"
        required: true
        type: choice
        options:
          - INS
          - XSG
      arch:
        description: "Device Architecture"
        default: "arm64"
        type: choice
        options:
          - arm64
          - arm32
      apps:
        description: "Preinstalled Applications"
        type: choice
        options:
          - floss
          - gapps
          - gogapps
          - vanilla
      vndklite:
        description: "Vndklite ROM or not"
        type: boolean
      secure:
        description: "Secure ROM or not"
        type: boolean

jobs:
  urlfinder:
    runs-on: ubuntu-latest
    outputs:
      jobinfo: ${{ steps.get-url.outputs.finalurl }}
    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"
            
      - name: Generate URL
        id: get-url
        run: |
            apps=${{ github.event.inputs.apps }}
            arch=${{ github.event.inputs.arch }}
            vndklite=${{ github.event.inputs.vndklite }}
            secure=${{ github.event.inputs.secure }}
            
            case "$apps" in
              "gapps")
                appTest='select(.name | test("gapps")) | select(.name | test("gogapps") | not) |'
                ;;
              "gogapps")
                appTest='select(.name | test("gogapps")) |'
                ;;
              "floss")
                appTest='select(.name | test("floss")) |'
                ;;
              *)
                appTest='select(.name | test("vanilla"))'
                ;;
            esac
            
            case "$arch" in
              "arm32")
                archTest='select(.name | test("arm32_binder64")) |'
                case "$apps" in
                  "gapps")
                    appTest='select(.name | test("gogapps")) |'
                    ;;
                  "gogapps")
                    appTest='select(.name | test("gogapps")) |'
                    ;;
                  *)
                    appTest='select(.name | test("vanilla")) |'
                    ;;
                esac
                ;;
              *)
                archTest='select(.name | test("arm64")) |'
                ;;
            esac
            
            case "$vndklite" in
              "true")
                vndkliteTest='select(.name | test("vndklite")) |'
                ;;
              *)
                vndkliteTest='select(.name | test("vndklite") | not) |'
                ;;
            esac
            
            case "$secure" in
              "true")
                secureTest='select(.name | test("secure")) |'
                vndkliteTest='select(.name | test("vndklite")) |'
                ;;
              *)
                secureTest='select(.name | test("secure") | not) |'
                ;;
            esac
            
            finalurlquery=".assets[] | ${appTest} ${archTest} ${vndkliteTest} ${secureTest} .browser_download_url"
            echo "URL_QUERY=${finalurlquery}" >> $GITHUB_ENV
              
  build:
    runs-on: ubuntu-20.04
    needs: urlfinder
    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"
            
      - name: Checkout Repository
        uses: actions/checkout@v2
        
      - name: Add OTATools PATH Environment
        run: |
          export PATH=$PATH:/home/runner/work/SamsungTrebleMaker/SamsungTrebleMaker/otatools/bin/
          echo "/home/runner/work/SamsungTrebleMaker/SamsungTrebleMaker/otatools/bin/" >> $GITHUB_PATH

      - name: Install Dependencies
        run: |
          sudo apt-get install simg2img lz4 unzip jq
          pip3 install git+https://github.com/samloader/samloader.git
      
      - name: Download and Decrypt Firmware
        run: |
          FWFileName="latestFW.zip.enc4"
          FMV=$(samloader -m ${{ github.event.inputs.device }} -r ${{ github.event.inputs.region }} checkupdate)
          echo $FMV
          echo "Downloading latest update"
          samloader -m ${{ github.event.inputs.device }} -r ${{ github.event.inputs.region }} download -v ${FMV} -o ${FWFileName}
          echo "Decrypting Update Files"
          samloader -m ${{ github.event.inputs.device }} -r ${{ github.event.inputs.region }} decrypt -v ${FMV} -i ${FWFileName} -V 4 -o latestFW.zip
        
      - name: Unzip Firmware and Extract AP
        run: |
          echo $FMV
          mkdir APFiles
          unzip latestFW.zip
          ls -l
          mv AP_*.tar.md5 ./APFiles
          cd APFiles
          mkdir APExtracted
          ls -l
          tar -xf AP_*.tar.md5 --verbose -C ./APExtracted
          
      - name: Measure and unpack super image
        id: superImageSIze
        run: |
          cd APFiles/APExtracted
          export PATH=$PATH:/home/runner/work/SamsungTrebleMaker/SamsungTrebleMaker/otatools/bin/
          chmod +x /home/runner/work/SamsungTrebleMaker/SamsungTrebleMaker/otatools/bin/lpunpack
          chmod +x /home/runner/work/SamsungTrebleMaker/SamsungTrebleMaker/otatools/bin/lpmake
          lz4 -d super.img.lz4 super.img
          simg2img super.img super.ext4.img
          OG_SUPER_SIZE=$(stat -c '%s' super.ext4.img)
          echo "::set-output name=ORIGINAL_SUPER_IMAGE_SIZE::$OG_SUPER_SIZE"
          mkdir superImageFiles
          ls -l
          rm super.img.lz4
          rm super.img
          lpunpack super.ext4.img ./superImageFiles
          rm super.ext4.img
          rm vbmeta.img.lz4
      
      - name: Upload AP Files
        uses: actions/upload-artifact@v3.1.0
        with:
          name: AP_Files
          path: APFiles/APExtracted/*.img.lz4

  
  compileFiles:
    runs-on: windows-latest
    needs: build
    steps:
       - name: Checkout Repository
         uses: actions/checkout@v3
         
       - name: Check working directory and files
         run: |
           pwd
           ls
         
       - name: Set up Python ${{ matrix.python-version }}
         uses: actions/setup-python@v4
         with:
          python-version: "3.10"
          
       - name: Download AP Files
         uses: actions/download-artifact@v3.0.0
         with:
          path: D:\a\SamsungTrebleMaker\SamsungTrebleMaker\tar-md5-script-tool
          name: AP_Files
        
       - name: Download Super Image
         uses: actions/download-artifact@v3.0.0
         with:
          path: D:\a\SamsungTrebleMaker\SamsungTrebleMaker\tar-md5-script-tool
          name: super_image
      
       - name: Build new AP File
         run: |
          cd tar-md5-script-tool
          ./batch.bat
        
       - name: Upload AP Files
         uses: actions/upload-artifact@v3.1.0
         with:
           name: Final AP File
           path: D:\a\SamsungTrebleMaker\SamsungTrebleMaker\tar-md5-script-tool/temp-folder
        
       - uses: joutvhu/delete-artifact@v1
         with:
           name: |
            AP_Files
            super_image
        
          


