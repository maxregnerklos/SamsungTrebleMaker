name: Treble Creator

on:
  workflow_dispatch:
    inputs:
      device:
        description: "Device Model Number"
        required: true
        type: choice
        options:
          - SM-G398FN
      region:
        description: "Device Region"
        type: choice
        options:
          - BTU
      arch:
        description: "Device Architecture"
        default: "arm64"
        type: choice
        options:
          - arm64
          - arm32
      apps:
        description: "Preinstalled Applications"
        type: choice
        options:
          - floss
          - gapps
          - gogapps
          - vanilla
      vndklite:
        description: "Vndklite ROM or not"
        type: boolean
      secure:
        description: "Secure ROM or not"
        type: boolean

jobs:
  urlfinder:
    runs-on: ubuntu-latest
    outputs:
      jobinfo: ${{ steps.get-url.outputs.finalurl }}
    steps:
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Generate URL
        id: get-url
        shell: python
        run: |
          import os

          env_file = os.getenv('GITHUB_ENV')

          apps = "${{ github.event.inputs.apps }}"
          arch = "${{ github.event.inputs.arch }}"
          vndklite = "${{ github.event.inputs.vndklite }}"
          secure = "${{ github.event.inputs.secure }}"
          
          appTest = ''
          archTest = ''
          vndkliteTest = ''
          secureTest = ''

          match apps:
            case "gapps":
              appTest = 'select(.name | test("gapps")) | select(.name | test("gogapps") | not) |'
            case "gogapps":
              appTest = 'select(.name | test("gogapps")) |'
            case "floss":
              appTest = 'select(.name | test("floss")) |'
            case _:
              appTest = 'select(.name | test("vanilla"))'
          
          match arch:
            case "arm32":
              archTest = 'select(.name | test("arm32_binder64")) |'
            case _:
              archTest = 'select(.name | test("arm64")) |'
          
          match vndklite:
            case "true":
              vndkliteTest = 'select(.name | test("vndklite")) |'
            case _:
              vndkliteTest = 'select(.name | test("vndklite") | not) |'
          
          match secure:
            case "true":
              secureTest = 'select(.name | test("secure")) |'
              vndkliteTest = 'select(.name | test("vndklite")) |'
            case _:
              secureTest = 'select(.name | test("secure") | not) |'
          
          finalurlquery = f".assets[] | {appTest} {archTest} {vndkliteTest} {secureTest} .browser_download_url"
          with open(env_file, "a") as g:
            print(f"URL_QUERY={finalurlquery}\n")
            g.write(f"URL_QUERY={finalurlquery}\n")

  build:
    runs-on: ubuntu-20.04
    needs: urlfinder
    steps:
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Add OTATools PATH Environment
        run: |
          echo "/home/runner/work/SamsungTrebleMaker/SamsungTrebleMaker/otatools/bin/" >> $GITHUB_PATH

      - name: Install Dependencies
        run: |
          sudo apt-get install simg2img lz4 unzip jq
          pip3 install git+https://github.com/samloader/samloader.git

      - name: Download and Decrypt Firmware
        run: |
          FWFileName="latestFW.zip.enc4"
          FMV=$(samloader -m ${{ github.event.inputs.device }} -r ${{ github.event.inputs.region }} checkupdate || true)
          if [ -z "$FMV" ]; then
            echo "Failed to fetch firmware version."
            exit 1
          fi
          echo "Downloading latest update"
          samloader -m ${{ github.event.inputs.device }} -r ${{ github.event.inputs.region }} download -v $FMV -o $FWFileName || true
          echo "Decrypting Update Files"
          samloader -m ${{ github.event.inputs.device }} -r ${{ github.event.inputs.region }} decrypt -v $FMV -i $FWFileName -V 4 -o latestFW.zip || true

      - name: Check Firmware File
        run: |
          if [ ! -f "latestFW.zip" ]; then
            echo "Failed to download or decrypt firmware."
            exit 1
          fi

      - name: Unzip Firmware and Extract AP
        run: |
          mkdir APFiles
          unzip latestFW.zip
          mv AP_*.tar.md5 APFiles/
          cd APFiles
          mkdir APExtracted
          tar -xf AP_*.tar.md5 -C APExtracted

      - name: Backup Original System Image
        run: |
          cd APFiles/APExtracted
          cp system.img.lz4 system.img.lz4.bak

      - name: Replace old system image
        run: |
          cd APFiles/APExtracted
          rm system.img
          finalAddress=$(curl -s https://api.github.com/repos/phhusson/treble_experimentations/releases/latest | jq -r "${{ env.URL_QUERY }}")
          wget $finalAddress -O system.img.xz
          xz --decompress system.img.xz
          lz4 -B6 --content-size system.img system.img.lz4

      - name: Transfer MD5 Checksum
        run: |
          cd APFiles/APExtracted
          original_md5=$(md5sum system.img.lz4.bak | cut -d ' ' -f 1)
          echo "$original_md5  system.img.lz4" | md5sum -c -
          if [ $? -ne 0 ]; then
            echo "MD5 checksums do not match, adjusting..."
            mv system.img.lz4 new_system.img.lz4
            cp system.img.lz4.bak system.img.lz4
            truncate -s $(stat -c%s new_system.img.lz4) system.img.lz4
            dd if=new_system.img.lz4 of=system.img.lz4 bs=1 count=$(stat -c%s new_system.img.lz4) conv=notrunc
            new_md5=$(md5sum system.img.lz4 | cut -d ' ' -f 1)
            if [ "$original_md5" != "$new_md5" ]; then
              echo "Failed to adjust MD5 checksum"
              exit 1
            fi
            echo "MD5 checksums match after adjustment"
          else
            echo "MD5 checksums match"
          fi

      - name: Upload AP Files
        uses: actions/upload-artifact@v3
        with:
          name: AP_Files
          path: APFiles/APExtracted/*.img.lz4

  compileFiles:
    runs-on: windows-latest
    needs: build
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Download AP Files
        uses: actions/download-artifact@v3
        with:
          path: tar-md5-script-tool
          name: AP_Files

      - name: Build new AP File
        run: |
          cd tar-md5-script-tool
          ./batch.bat

      - name: Upload AP Files
        uses: actions/upload-artifact@v3
        with:
          name: Final AP File
          path: tar-md5-script-tool/temp-folder

      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@v2.0.3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 0
          keep_minimum_runs: 0
